# -*- coding: utf-8 -*-
"""data science Knn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l-TpuQhHxWkls-pVp7mlHRkcCDnFJm78
"""

import pandas as pd
import numpy as np
# from sklearn.neighbors import KNeighborsClassifier
# from sklearn.model_selection import train_test_split
df = pd.read_csv("/content/user_behavior_dataset - Copy.csv")
print(df)

from sklearn import preprocessing
le=preprocessing.LabelEncoder()
df['Operating System']=le.fit_transform(df['Operating System'])
df['Device Model']=le.fit_transform(df['Device Model'])
df['Gender'] = le.fit_transform(df['Gender'])
print(df)

x = df[["Operating System","Device Model","App Usage Time (min/day)","Screen On Time (hours/day)","Battery Drain (mAh/day)","Age","Gender"]].values
y = df["User Behavior Class"].values
print(x)
print(y)

from sklearn.linear_model import LogisticRegression as logisticeregression
logres = logisticeregression()
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)
logres.fit(x_train,y_train)
y_pred=  logres.predict(x_test)
print(y_pred)
print(y_test)

from sklearn import metrics
cnf_metrix = metrics.confusion_matrix(y_test,y_pred)
print(cnf_metrix)

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
# %matplotlib inline

import pandas as pd
# %matplotlib inline

class_names=[0,1]
fig, ax = plt.subplots()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)
sns.heatmap(pd.DataFrame(cnf_metrix), annot=True, cmap="YlGnBu" ,fmt='g')
ax.xaxis.set_label_position("top")
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
df = pd.read_csv("/content/gym_members_exercise_tracking.csv")
print(df)

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])
df['Workout_Type'] = le.fit_transform(df['Workout_Type'])
print(df)

from sklearn.neighbors import KNeighborsRegressor # Import KNeighborsRegressor
from sklearn.model_selection import train_test_split

# ... (your existing code for data loading and preprocessing) ...

x = df[["Age","Gender","Height (m)","Max_BPM","Avg_BPM", "Resting_BPM","Session_Duration (hours)","Calories_Burned","Workout_Type","Fat_Percentage","Water_Intake (liters)","Workout_Frequency (days/week)","Experience_Level"]].values
y = df['BMI'].values

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

# Use KNeighborsRegressor for regression tasks
knn = KNeighborsRegressor(n_neighbors=5)  # Change to KNeighborsRegressor

knn.fit(x_train, y_train)
y_pred = knn.predict(x_test)
print(y_pred)
print(y_test)

mse = metrics.mean_squared_error(y_test, y_pred)
r2 = metrics.r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)